{"compiler":{"version":"0.5.15+commit.6a57276f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"_TREE_HEIGHT","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":true,"inputs":[],"name":"FIRST_LEAF_NODE_INDEX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"LAST_LEAF_NODE_INDEX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"NUM_BUCKETS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"NUM_LEAF_NODES","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"TREE_HEIGHT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256[]","name":"table_index_of_garbled_inputs","type":"uint256[]"},{"internalType":"bytes32[]","name":"garbled_inputs","type":"bytes32[]"},{"internalType":"uint256[]","name":"execution_sequence","type":"uint256[]"},{"internalType":"uint256[]","name":"table_index_of_end_tables","type":"uint256[]"}],"name":"decrypt","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256[]","name":"table_index_of_garbled_inputs","type":"uint256[]"}],"name":"decrypt_label_update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256[]","name":"table_indices","type":"uint256[]"}],"name":"get_index_from_decryption_result","outputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256[]","name":"table_indices","type":"uint256[]"}],"name":"get_nodes_from_decryption_result","outputs":[{"internalType":"bytes32[4][]","name":"","type":"bytes32[4][]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_num_inputs","type":"uint256"},{"internalType":"uint256[3][]","name":"table_relation","type":"uint256[3][]"},{"internalType":"uint256[]","name":"table_index_of_table_entries","type":"uint256[]"},{"internalType":"bytes32[4][]","name":"all_table_entries","type":"bytes32[4][]"},{"internalType":"bytes32[2][]","name":"all_table_output_hash_digests","type":"bytes32[2][]"},{"internalType":"uint256[]","name":"table_index_of_garbled_inputs","type":"uint256[]"},{"internalType":"bytes32[]","name":"garbled_inputs","type":"bytes32[]"},{"internalType":"uint256[]","name":"table_index_of_outputs","type":"uint256[]"},{"internalType":"bytes32[2][]","name":"_outputs","type":"bytes32[2][]"},{"internalType":"bytes32[4][]","name":"_label_updates","type":"bytes32[4][]"}],"name":"initial_deploy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"nodes","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"num_inputs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"num_results","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"num_tables","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"leaf_node_index","type":"uint256"}],"name":"read_branch","outputs":[{"internalType":"bytes32[4][]","name":"","type":"bytes32[4][]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"table_index","type":"uint256"}],"name":"read_decryption_result","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"table_index","type":"uint256"}],"name":"read_gtt","outputs":[{"internalType":"bytes32[4]","name":"gtt","type":"bytes32[4]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"table_index","type":"uint256"}],"name":"read_inputs_of_table","outputs":[{"internalType":"bytes32[2]","name":"inputs","type":"bytes32[2]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256[]","name":"table_indices","type":"uint256[]"}],"name":"read_label_updates","outputs":[{"internalType":"bytes32[4][]","name":"","type":"bytes32[4][]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"node_index","type":"uint256"}],"name":"read_node","outputs":[{"internalType":"bytes32[4]","name":"node","type":"bytes32[4]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"table_index","type":"uint256"}],"name":"read_output_hash_digests_of_table","outputs":[{"internalType":"bytes32[2]","name":"_hash_digests","type":"bytes32[2]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"table_index","type":"uint256"}],"name":"read_outputs_of_table","outputs":[{"internalType":"bytes32[2]","name":"_outputs","type":"bytes32[2]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"table_index","type":"uint256"}],"name":"read_parent_table_indices","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256[]","name":"table_index_of_table_entries","type":"uint256[]"},{"internalType":"bytes32[4][]","name":"all_table_entries","type":"bytes32[4][]"},{"internalType":"bytes32[2][]","name":"all_table_output_hash_digests","type":"bytes32[2][]"},{"internalType":"uint256[]","name":"table_index_of_outputs","type":"uint256[]"},{"internalType":"bytes32[2][]","name":"_outputs","type":"bytes32[2][]"},{"internalType":"uint256[]","name":"table_index_of_garbled_inputs","type":"uint256[]"},{"internalType":"bytes32[4][]","name":"_label_updates","type":"bytes32[4][]"}],"name":"redeploy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256[]","name":"node_indices","type":"uint256[]"},{"internalType":"bytes32[4][]","name":"new_nodes","type":"bytes32[4][]"}],"name":"update_nodes","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"decrypt(uint256[],bytes32[],uint256[],uint256[])":{"details":"Decrypt circuit.     * - `table_index_of_garbled_inputs` and `garbled_inputs` are used to fill in the x inputs of each input table. - since entries of each table are shuffled, it will need to try decrypting each entry. - `table_index_of_end_tables` represents the index of each end table     - it is used to check the output of end tables, i.e., the decryption results we are expecting"},"decrypt_label_update(uint256[])":{"details":"Decrypt label updates info, compute labels for next round and update old labels."},"get_index_from_decryption_result(uint256[])":{"details":"Read the decryption result which are bits and turn them into a single number, i.e., the index."},"get_nodes_from_decryption_result(uint256[])":{"details":"Feed the leaf node index read from `get_index_from_decryption_result` into `read_branch`. "},"initial_deploy(uint256,uint256[3][],uint256[],bytes32[4][],bytes32[2][],uint256[],bytes32[],uint256[],bytes32[2][],bytes32[4][])":{"details":"Initial deployment of circuit. It builds the relation between tables and fills in the data used for first round of decryption. NOTE: This function should be executed only once.     * Example circuit layout    t_2   /   \\  x     y /       \\ t_0       t_1 (t_0's output is t_2's x input) (t_1's output is t_2's y input)     * Entry in `table_relation` represents relation between a child table and its parent table. Also provides info of which input(x input of y input) is the child to parent. `all_table_entries` represents (shuffled) entries of each table.     * It also records the total number of inputs and the total number of tables."},"read_branch(uint256)":{"details":"Read the whole branch of nodes by the specified leaf node index.     * Example:     node_1     /    \\ node_2   node_3    /         \\ node_4       node_5     * Nodes 1, 3 and 5 will be read if leaf node index is 5."},"read_decryption_result(uint256)":{"details":"Read decryption result of garbled truth table by the specified index.     * Result are one of the following 2: true 1: false 0: not set"},"read_gtt(uint256)":{"details":"Read garbled truth table by the specified index."},"read_inputs_of_table(uint256)":{"details":"Read inputs of garbled truth table by the specified index."},"read_label_updates(uint256[])":{"details":"Read label updates info of garbled truth table by the specified indices. These info will be provided in `upload_label_updates_info`."},"read_node(uint256)":{"details":"Read the node by the specified index."},"read_output_hash_digests_of_table(uint256)":{"details":"Read hash digest of outputs of garbled truth table by the specified index. Hash digests are used to determined if the decrypted output is correct."},"read_outputs_of_table(uint256)":{"details":"Read outputs of garbled truth table by the specified index. The outputs are used to determine whether decryption result is bit 0 or bit 1."},"read_parent_table_indices(uint256)":{"details":"Read garbled truth table by the specified index."},"redeploy(uint256[],bytes32[4][],bytes32[2][],uint256[],bytes32[2][],uint256[],bytes32[4][])":{"details":"Deployment of circuit afterwards(after initial deployment). It fills in the data used for next round of decryption."},"update_nodes(uint256[],bytes32[4][])":{"details":"Update nodes at the specified indices."}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"GCTreeBasedORAM.sol":"GCTreeBasedORAM"},"evmVersion":"istanbul","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"GCTreeBasedORAM.sol":{"keccak256":"0x04e87643f3b5b5fe0425717886b3f9f88c2982ebc58c5d7bef23f91d84d91ba9","urls":["bzz-raw://b547e25e2526835a463ccaa6d2081646eb58027e7e4ea95f9cd5e9c4f20e22c2","dweb:/ipfs/QmZgrRfVkadopH7gSvyJ5mPmEVec4YxPDwFXhFx3uFfMG9"]},"GarbledCircuit.sol":{"keccak256":"0x65a8c0c8dce9fbae15407f0894f7364a09d2990fa44c971bf8ddb0acdedfa8c5","urls":["bzz-raw://fe1f1f3b8561b75849bc0a1ae40dbf6688c060a967382a5fd25e86e9632ae76f","dweb:/ipfs/QmXnsir72vEUDHYKicL7U7qj1RrhScfXteVagpmr762aho"]},"SafeMath.sol":{"keccak256":"0x440e126d35c767f263ad60029d68b9f1a946caedcc51ae10266f28e305fffe40","urls":["bzz-raw://87eaf2dfa0a988fd31e8b44703ffbf21a99a8c663263c2fad2c26dc9a120d5c3","dweb:/ipfs/QmenpSEG3kX4SbXDuDVDi7EwHgSrRTYrbEdJ1H2H14HxGZ"]}},"version":1}